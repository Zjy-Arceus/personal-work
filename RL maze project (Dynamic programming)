##create random maze

import random
import numpy as np
from matplotlib import pyplot as plt
import matplotlib.cm as cm


row_num = int(input("Randomly create a square maze."+'\n'+"Enter Row and Cloumn number:"))
col_num = int(row_num)

Array_maze = np.zeros((row_num,col_num,5),dtype=np.uint8)
Image_maze = np.zeros((row_num*10,col_num*10),dtype=np.uint8)
Image_maze_ = np.zeros((row_num*10,col_num*10),dtype=np.uint8)

row = 0
col = 0
history = [(row,col)]

while history:
    Array_maze[row,col,4] = 1
    check = []
    if col > 0 and Array_maze[row,col-1,4] == 0:
        check.append('L')
    if row > 0 and Array_maze[row-1,col,4] == 0:
        check.append('U')
    if col < col_num-1 and Array_maze[row,col+1,4] == 0:
        check.append('R')
    if row < row_num-1 and Array_maze[row+1,col,4] == 0:
        check.append('D')
    
    if len(check):
        history.append([row,col])
        movement = random.choice(check)
        
        if movement == 'L':
            Array_maze[row,col,0] = 1
            col = col - 1
            Array_maze[row,col,2] = 1
        if movement == 'U':
            Array_maze[row,col,1] = 1
            row = row - 1
            Array_maze[row,col,3] = 1
        if movement == 'R':
            Array_maze[row,col,2] = 1
            col = col + 1
            Array_maze[row,col,0] = 1   
        if movement == 'D':
            Array_maze[row,col,3] = 1
            row = row + 1
            Array_maze[row,col,1] = 1
            
    else:
        row,col = history.pop()

Array_maze[0,0,0] = 1
Array_maze[random.randint(0,row_num-1),col_num-1,2] = 1

for row in range(0,row_num):
    for col in range(0,col_num):
        Draw_data = Array_maze[row,col]
        for i in range(10*row+2,10*row+8):
            Image_maze[i,range(10*col+2,10*col+8)] = 255
        if Draw_data[0] == 1:
            Image_maze[range(10*row+2,10*row+8),10*col] = 255
            Image_maze[range(10*row+2,10*row+8),10*col+1] = 255
        if Draw_data[1] == 1:
            Image_maze[10*row,range(10*col+2,10*col+8)] = 255
            Image_maze[10*row+1,range(10*col+2,10*col+8)] = 255
        if Draw_data[2] == 1:
            Image_maze[range(10*row+2,10*row+8),10*col+9] = 255
            Image_maze[range(10*row+2,10*row+8),10*col+8] = 255
        if Draw_data[3] == 1:
            Image_maze[10*row+9,range(10*col+2,10*col+8)] = 255
            Image_maze[10*row+8,range(10*col+2,10*col+8)] = 255


plt.axis('off')
plt.imshow(Image_maze,cmap = cm.Greys_r)

plt.savefig("maze_sample.jpg",bbox_inches='tight',pad_inches=0.085)
plt.show()

## random explore

import cv2

Array_maze_t = np.array(Array_maze)

img_ = cv2.imread("./maze_sample.jpg")
img = cv2.resize(img_,(0,0),fx=col_num/10*1.01,fy=row_num/10*1.01,interpolation=cv2.INTER_CUBIC)
red = (0,0,255)


selection = ['U','D','L','R']
cur_row = 0
cur_col = 0
step = 0

cur_x = 15 + int((row_num/10-1)*6)
cur_y = 14 + int((row_num/10-1)*6)
cv2.line(img,(0,cur_y),(cur_x,cur_y),red,3)
move_index = 22

Array_maze_t[0,0,0] = 0

check_maze = list()
check_point = list()

re_flag1 = False
re_flag2 = False

notfin_flag = True

while (cur_col != col_num):
    
    move = random.choice(selection)

    if str(Array_maze_t[cur_row,cur_col,:4]).count("1")>1 and re_flag1 == False:
        check_maze.append((cur_row,cur_col))
        check_point.append((cur_x,cur_y))
        re_flag1 = True
        
        
    if move == 'L' and Array_maze_t[cur_row,cur_col,0] == 1:
        Array_maze_t[cur_row,cur_col,0] = 0
        Array_maze_t[cur_row,cur_col-1,2] = 0
        if notfin_flag:
            cv2.line(img,(cur_x,cur_y),(cur_x - move_index,cur_y),red,3)
            cv2.imwrite("./image_process/"+str(step)+".jpg",img)
        step += 1
        cur_col -= 1
        cur_x -= move_index
        re_flag1 = False
        re_flag2 = False


    if move == 'U' and Array_maze_t[cur_row,cur_col,1] == 1:
        Array_maze_t[cur_row,cur_col,1] = 0
        Array_maze_t[cur_row-1,cur_col,3] = 0
        if notfin_flag:
            cv2.line(img,(cur_x,cur_y),(cur_x,cur_y - move_index),red,3)
            cv2.imwrite("./image_process/"+str(step)+".jpg",img)
        step += 1
        cur_row -= 1
        cur_y -= move_index
        re_flag1 = False
        re_flag2 = False


    if move == 'R' and Array_maze_t[cur_row,cur_col,2] == 1:
        Array_maze_t[cur_row,cur_col,2] = 0
        if cur_col != col_num-1:
            Array_maze_t[cur_row,cur_col+1,0] = 0
        if notfin_flag:
            cv2.line(img,(cur_x,cur_y),(cur_x + move_index,cur_y),red,3)
            cv2.imwrite("./image_process/"+str(step)+".jpg",img)
        step += 1
        if cur_col == col_num-1:
            Array_maze_t[cur_row,cur_col,2] = 0
        cur_col += 1
        cur_x += move_index
        re_flag1 = False
        re_flag2 = False


    if move == 'D' and Array_maze_t[cur_row,cur_col,3] == 1:
        Array_maze_t[cur_row,cur_col,3] = 0
        if cur_row != row_num-1:
            Array_maze_t[cur_row+1,cur_col,1] = 0
        if notfin_flag:
            cv2.line(img,(cur_x,cur_y),(cur_x,cur_y + move_index),red,3)
            cv2.imwrite("./image_process/"+str(step)+".jpg",img)
        step += 1
        cur_row += 1
        cur_y += move_index
        re_flag1 = False
        re_flag2 = False
        
        
    if cur_col != col_num:
        if str(Array_maze_t[cur_row,cur_col,:4]).count("1") == 0 and re_flag2 == False:
            cur_row,cur_col = check_maze.pop()
            cur_x,cur_y = check_point.pop()
            re_flag2 = True

    
finish_row = cur_row
first_step = int(step)

cv2.imshow("image",img)
cv2.waitKey()
cv2.imwrite("./maze_result.jpg",img)

## get reward value matrix

check_maze_2 = list()
maze_x = list()
re_flag1 = False
re_flag2 = False

cur_col = int(col_num - 1)
cur_row = finish_row
Array_maze_t2 = np.array(Array_maze)
Array_maze_t2[cur_row,cur_col,2] = 0
step = 0

reward_value = np.zeros((row_num,col_num),dtype=int)
value_count = 0

while (step != col_num * row_num):

    if cur_row == 0 and cur_col == -1:
        notfin_flag = False
        cur_row,cur_col = check_maze_2.pop()
        value_count = reward_value[cur_row,cur_col]
        
        
    if str(Array_maze_t2[cur_row,cur_col,:4]).count("1")>1 and re_flag1 == False:
        check_maze_2.append((cur_row,cur_col))
        maze_x.append((cur_row,cur_col))
        re_flag1 = True
        
        
    if Array_maze_t2[cur_row,cur_col,0] == 1:
        Array_maze_t2[cur_row,cur_col,0] = 0
        Array_maze_t2[cur_row,cur_col-1,2] = 0
        step += 1
        reward_value[cur_row,cur_col] = value_count
        value_count -= 1
        cur_col -= 1
        re_flag1 = False
        re_flag2 = False
        
    elif Array_maze_t2[cur_row,cur_col,1] == 1:
        Array_maze_t2[cur_row,cur_col,1] = 0
        Array_maze_t2[cur_row-1,cur_col,3] = 0
        step += 1
        reward_value[cur_row,cur_col] = value_count
        value_count -= 1
        cur_row -= 1
        re_flag1 = False
        re_flag2 = False
        
    elif Array_maze_t2[cur_row,cur_col,2] == 1:
        Array_maze_t2[cur_row,cur_col,2] = 0
        if cur_col != col_num-1:
            Array_maze_t2[cur_row,cur_col+1,0] = 0
        step += 1
        if cur_col == col_num-1:
            Array_maze_t2[cur_row,cur_col,2] = 0
        reward_value[cur_row,cur_col] = value_count
        value_count -= 1
        cur_col += 1
        re_flag1 = False
        re_flag2 = False
        
    elif Array_maze_t2[cur_row,cur_col,3] == 1:
        Array_maze_t2[cur_row,cur_col,3] = 0
        if cur_row != row_num-1:
            Array_maze_t2[cur_row+1,cur_col,1] = 0
        step += 1
        reward_value[cur_row,cur_col] = value_count
        value_count -= 1
        cur_row += 1
        re_flag1 = False
        re_flag2 = False
        
        
    if str(Array_maze_t2[cur_row,cur_col,:4]).count("1") == 0 and re_flag2 == False and cur_col!= -1:
        reward_value[cur_row,cur_col] = value_count
        if step == col_num * row_num:
            break
        cur_row,cur_col = check_maze_2.pop()
        value_count = reward_value[cur_row,cur_col]
        re_flag2 = True

print(reward_value)

## get random bonus points

reward_value_t = np.array(reward_value)

bonus_row = [-1,-1,-1]
bonus_col = [-1,-1,-1]
bonus_num = 0

if row_num < 25:
    bonus_row[0] = random.randint(0,row_num-1)
    bonus_row[1] = random.randint(0,row_num-1)
    bonus_col[0] = random.randint(0,int((row_num-1)/2))
    bonus_col[1] = random.randint(int((row_num-1)/2)+1,row_num-1)
    bonus_num = 2
    print(bonus_row[0],bonus_col[0],'/',bonus_row[1],bonus_col[1])

if row_num >= 25:
    bonus_row[0] = random.randint(0,row_num-1)
    bonus_row[1]= random.randint(0,row_num-1)
    bonus_row[2] = random.randint(0,row_num-1)
    bonus_col[0]= random.randint(0,int((row_num-1)/3))
    bonus_col[1] = random.randint(int((row_num-1)/3)+1,int((row_num-1)*2/3))
    bonus_col[2] = random.randint(int((row_num-1)*2/3)+1,col_num-1)
    bonus_num = 3
    print(bonus_row[0],bonus_col[0],'/',bonus_row[1],bonus_col[1],'/',bonus_row[2],bonus_col[2])

## get great path algorithm

extra_reward = [-1,-1,-1]
extra_reward[0] = int(input("Enter first bonus value:"))
extra_reward[1] = int(input("Enter second bonus value:"))
if bonus_num == 3:
    extra_reward[2] = int(input("Enter third bonus value:"))

explore_matrix = np.zeros((row_num,col_num),dtype=int)
explore_matrix[0,0] = 1

Array_maze_t = np.array(Array_maze)
Array_maze_t2 = np.array(Array_maze)
reward_value_t = np.array(reward_value)

Array_maze_t[0,0,0] = 0
Array_maze_t2[0,0,0] = 0
sub_cross = list()
bonus_flag = [False,False,False]
bonus_cross = list()
bonus_cross_p = list()


def check_point(row,col):
    
    global bonus_flag
        
    if row == bonus_row[0] and col == bonus_col[0]:
        bonus_flag[0] = True
        return bonus_flag[0]
    elif row == bonus_row[1] and col == bonus_col[1]:
        bonus_flag[1] = True
        return bonus_flag[1]
    elif row == bonus_row[2] and col == bonus_col[2]:
        bonus_flag[2] = True
        return bonus_flag[2]
    else:
        return False

def check_bonus_cross(bonus_cross,bonus_cross_p,row,col,x,y):
    
    if str(Array_maze_t2[row,col,:4]).count("1") > 2:
        bonus_cross.append((row,col))
        bonus_cross_p.append((x,y))
        
    if col == col_num-1 and Array_maze_t[row,col,2] == 1:
        bonus_cross.append((row,col))
        bonus_cross_p.append((x,y))
        
    return bonus_cross,bonus_cross_p

def create_value_matrix(bonus_x,bonus_y,bonus_step,reward,i):
    
    not_worth = [False,False,False,False]
    
    while(explore_matrix[bonus_x,bonus_y] == 0):
#         print("bonus:",bonus_x,bonus_y) for debug
        if Array_maze_t[bonus_x,bonus_y,0] == 1 and reward_value_t[bonus_x,bonus_y-1] > reward_value_t[bonus_x,bonus_y]:
            Array_maze_t[bonus_x,bonus_y-1,2] = 0
            bonus_step += 1
            if bonus_step <= reward:
                reward_value_t[bonus_x,bonus_y] = reward - bonus_step
                explore_matrix[bonus_x,bonus_y] = 1
                bonus_y -= 1
                not_worth[0] = False

        else:
            not_worth[0] = True
            
        if Array_maze_t[bonus_x,bonus_y,1] == 1 and reward_value_t[bonus_x-1,bonus_y] > reward_value_t[bonus_x,bonus_y]:
            Array_maze_t[bonus_x-1,bonus_y,3] = 0
            bonus_step += 1
            if bonus_step <= reward:
                reward_value_t[bonus_x,bonus_y] = reward - bonus_step
                explore_matrix[bonus_x,bonus_y] = 1
                bonus_x -= 1
                not_worth[1] = False
        else:
            not_worth[1] = True
            
        if Array_maze_t[bonus_x,bonus_y,2] == 1 and reward_value_t[bonus_x,bonus_y+1] > reward_value_t[bonus_x,bonus_y]:
            Array_maze_t[bonus_x,bonus_y+1,0] = 0
            bonus_step += 1
            if bonus_step <= reward:
                reward_value_t[bonus_x,bonus_y] = reward - bonus_step
                explore_matrix[bonus_x,bonus_y] = 1
                bonus_y += 1
                not_worth[2] = False
        else:
            not_worth[2] = True
            
        if Array_maze_t[bonus_x,bonus_y,3] == 1 and reward_value_t[bonus_x+1,bonus_y] > reward_value_t[bonus_x,bonus_y]:
            Array_maze_t[bonus_x+1,bonus_y,1] = 0
            bonus_step += 1
            if bonus_step <= reward:
                reward_value_t[bonus_x,bonus_y] = reward - bonus_step
                explore_matrix[bonus_x,bonus_y] = 1
                bonus_x += 1
                not_worth[3] = False
        else:
            not_worth[3] = True
            
        if not_worth.count(True) == 4 or bonus_step>reward:
            bonus_flag[i] = True
#             print([i]) for debug
            break

def choose_direction(row,col,reward_value):
    worth = [-1,-1,-1,-1]
    if Array_maze_t[row,col,0] == 1:
        if reward_value[row,col-1] > 1:
            return 0
        worth[0] = int(reward_value[row,col-1] - reward_value[row,col])
    if Array_maze_t[row,col,1] == 1:
        if reward_value[row-1,col] > 1:
            return 1
        worth[1] = int(reward_value[row-1,col] - reward_value[row,col])
    if Array_maze_t[row,col,2] == 1:
        if col == col_num-1:
            return 2
        if reward_value[row,col+1] > 1:
            return 2
        worth[2] = int(reward_value[row,col+1] - reward_value[row,col])
    if Array_maze_t[row,col,3] == 1:
        if reward_value[row+1,col] > 1:
            return 3
        worth[3] = int(reward_value[row+1,col] - reward_value[row,col])
    
    if max(worth)<0:
        return 4
    else:
        return int(worth.index(max(worth)))

cur_row = 0
cur_col = 0

while (cur_col != col_num): ###################  探索最短路径

    
    if Array_maze_t[cur_row,cur_col,0] == 1 and reward_value_t[cur_row,cur_col-1] > reward_value_t[cur_row,cur_col]:
        Array_maze_t[cur_row,cur_col,0] = 0
        Array_maze_t[cur_row,cur_col-1,2] = 0
        explore_matrix[cur_row,cur_col-1] = explore_matrix[cur_row,cur_col] + 1
        cur_col -= 1
        check_point(cur_row,cur_col)
        
    
    if Array_maze_t[cur_row,cur_col,1] == 1 and reward_value_t[cur_row-1,cur_col] > reward_value_t[cur_row,cur_col]:
        Array_maze_t[cur_row,cur_col,1] = 0
        Array_maze_t[cur_row-1,cur_col,3] = 0
        explore_matrix[cur_row-1,cur_col] = explore_matrix[cur_row,cur_col] + 1
        cur_row -= 1
        check_point(cur_row,cur_col)
        

    if Array_maze_t[cur_row,cur_col,2] == 1:
        if cur_col == col_num-1:
            Array_maze_t[cur_row,cur_col,2] = 0
            break
        elif reward_value_t[cur_row,cur_col+1] > reward_value_t[cur_row,cur_col]:
            Array_maze_t[cur_row,cur_col,2] = 0
            Array_maze_t[cur_row,cur_col+1,0] = 0
            explore_matrix[cur_row,cur_col+1] = explore_matrix[cur_row,cur_col] + 1
            cur_col += 1 
            check_point(cur_row,cur_col)
        
    if Array_maze_t[cur_row,cur_col,3] == 1 and reward_value_t[cur_row+1,cur_col] > reward_value_t[cur_row,cur_col]:
        Array_maze_t[cur_row,cur_col,3] = 0
        Array_maze_t[cur_row+1,cur_col,1] = 0
        explore_matrix[cur_row+1,cur_col] = explore_matrix[cur_row,cur_col] + 1
        cur_row += 1
        check_point(cur_row,cur_col)

Array_maze_t[cur_row,col_num-1,2] = 0
Array_maze_t2[cur_row,col_num-1,2] = 0

# print(explore_matrix)

########################################################
# reward_value

if bonus_flag.count(True) < bonus_num:
    
    bonus_x = 0
    bonus_y = 0
    
    for i in range(bonus_num):
        
        if bonus_flag[i] != True:
        
            bonus_x = int(bonus_row[i])
            bonus_y = int(bonus_col[i])
            bonus_step = 0
            reward = int(extra_reward[i]/2)
            create_value_matrix(bonus_x,bonus_y,bonus_step,reward,i)

############################
img_ = cv2.imread("./maze_sample.jpg")
img = cv2.resize(img_,(0,0),fx=col_num/10*1.01,fy=row_num/10*1.01,interpolation=cv2.INTER_CUBIC)
blue = (255,0,0)
purple = (255,0,255)
step = 0



cur_x = 15 + int((row_num/10-1)*6)
cur_y = 14 + int((row_num/10-1)*6)

cv2.line(img,(0,cur_y),(cur_x,cur_y),blue,3)
for i in range(bonus_num):
    cv2.circle(img,(cur_x+(bonus_col[i])*22,cur_y+(bonus_row[i])*22),2,purple,5)

    
cv2.imwrite("./plan_process/"+str(step)+".jpg",img)
############################

Array_maze_t = np.array(Array_maze)
Array_maze_t[0,0,0] = 0

cur_row = 0
cur_col = 0
choice_num = -1

while (cur_col != col_num): ###################  走最短路径

#     print(cur_row,cur_col) for debug
    choice_num = choose_direction(cur_row,cur_col,reward_value_t)

    

    if choice_num == 0:    
        check_bonus_cross(bonus_cross,bonus_cross_p,cur_row,cur_col,cur_x,cur_y)
        Array_maze_t[cur_row,cur_col,0] = 0
        Array_maze_t[cur_row,cur_col-1,2] = 0
        cv2.line(img,(cur_x,cur_y),(cur_x - move_index,cur_y),blue,3)
        step += 1
        cur_col -= 1
        cv2.imwrite("./plan_process/"+str(step)+".jpg",img)
        cur_x -= move_index
        check_point(cur_row,cur_col)

    
    if choice_num == 1:   
        check_bonus_cross(bonus_cross,bonus_cross_p,cur_row,cur_col,cur_x,cur_y)
        Array_maze_t[cur_row,cur_col,1] = 0
        Array_maze_t[cur_row-1,cur_col,3] = 0
        cv2.line(img,(cur_x,cur_y),(cur_x ,cur_y - move_index),blue,3)
        step += 1
        cur_row -= 1
        cv2.imwrite("./plan_process/"+str(step)+".jpg",img)
        cur_y -= move_index
        check_point(cur_row,cur_col)

        

    if choice_num == 2:
        if cur_col == col_num-1:
            cv2.line(img,(cur_x,cur_y),(cur_x + move_index ,cur_y),blue,3)
            step += 1
            cur_col += 1
            cv2.imwrite("./plan_process/"+str(step)+".jpg",img)
            cur_x += move_index
            break
                
            
        elif reward_value_t[cur_row,cur_col+1] > reward_value_t[cur_row,cur_col] or reward_value_t[cur_row,cur_col+1] > 0:
            check_bonus_cross(bonus_cross,bonus_cross_p,cur_row,cur_col,cur_x,cur_y)
            Array_maze_t[cur_row,cur_col,2] = 0
            Array_maze_t[cur_row,cur_col+1,0] = 0
            cv2.line(img,(cur_x,cur_y),(cur_x + move_index,cur_y),blue,3)
            step += 1
            cur_col += 1
            cv2.imwrite("./plan_process/"+str(step)+".jpg",img)
            cur_x += move_index
            check_point(cur_row,cur_col)

    if choice_num == 3:
        check_bonus_cross(bonus_cross,bonus_cross_p,cur_row,cur_col,cur_x,cur_y)
        Array_maze_t[cur_row,cur_col,3] = 0
        Array_maze_t[cur_row+1,cur_col,1] = 0
        cv2.line(img,(cur_x,cur_y),(cur_x ,cur_y + move_index),blue,3)
        step += 1
        cur_row += 1
        cv2.imwrite("./plan_process/"+str(step)+".jpg",img)
        cur_y += move_index
        check_point(cur_row,cur_col)

    
    if choice_num == 4:
        cur_row,cur_col = bonus_cross.pop()
        cur_x,cur_y = bonus_cross_p.pop()
        
for i in range(bonus_num):
    cv2.circle(img,(15 + int((row_num/10-1)*6)+(bonus_col[i])*22,14 + int((row_num/10-1)*6)+(bonus_row[i])*22),2,purple,5)
    
cv2.imshow("image",img)
cv2.waitKey()
cv2.imwrite("./maze_best_plan.jpg",img)

## output all images into GIF

import imageio       
filenames_1 = []
filenames_2 = []

for i in range(first_step):
    filename_1 = "./image_process/"+ str(i)+".jpg"
    filenames_1.append(filename_1)
    
for i in range(step+1):
    filename_2 = "./plan_process/"+ str(i)+".jpg"
    filenames_2.append(filename_2)


def create_gif(image_list, gif_name, duration=0.1):
    frames = []
    for image_name in image_list:
        frames.append(imageio.imread(image_name))
    imageio.mimsave(gif_name, frames, 'GIF', duration=duration)
    return

create_gif(filenames_1,'maze_explore.gif', 0.05)
create_gif(filenames_2,'maze_plan.gif', 0.05)

